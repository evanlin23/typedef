@import "tailwindcss";

@theme {
  /* Font Variables (example, if you had them) */
  /* --font-sans: "Inter", system-ui, sans-serif; */
  /* --font-mono: "JetBrains Mono", monospace; */

  /* Breakpoint Variables (example, if you had them) */
  /* --breakpoint-sm: 640px; */
  /* --breakpoint-md: 768px; */
  /* --breakpoint-lg: 1024px; */
  /* --breakpoint-xl: 1280px; */

  /* Color Variables (using oklch from your previous setup) */
  --color-background-primary: oklch(21% 0.034 264.665);        /* gray-900 */
  --color-background-secondary: oklch(27.8% 0.033 256.848);    /* gray-800 */
  
  --color-text-primary: oklch(92.8% 0.006 264.531);            /* gray-200 */
  --color-text-secondary: oklch(70.7% 0.022 261.325);          /* gray-400 */
  
  --color-accent-primary: oklch(79.2% 0.209 151.711);          /* green-400 */
  --color-accent-secondary: oklch(70.7% 0.165 254.624);        /* blue-400 */
  
  --color-error-primary: oklch(63.7% 0.237 25.331);            /* red-500 */
  
  --color-border-primary: oklch(37.3% 0.034 259.733);          /* gray-700 */
  --color-border-secondary: oklch(44.6% 0.03 256.802);         /* gray-600 */

  /* Custom Animations (as CSS variables to be used with animate utilities or arbitrary values) */
  /* Note: Tailwind v4 automatically generates utilities for animations if keyframes are defined globally.
     However, to keep it explicit and within @theme for easier override/management, 
     we can define the animation property itself as a variable.
     Or, define keyframes globally and Tailwind will pick them up for `animate-*` utilities.
     Let's define keyframes globally for standard `animate-*` usage.
  */
}

/* Global keyframes for animations */
@keyframes pulseOnce {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

@keyframes fadeIn {
  0% { opacity: 0; transform: translateY(10px); } /* Added a slight translate for better effect */
  100% { opacity: 1; transform: translateY(0); }
}

/* Apply base styles. These could also be in @layer base if preferred */
body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--color-background-primary); /* Use the CSS variable directly */
  color: var(--color-text-primary); /* Use the CSS variable directly */
}

/* Custom component styles if needed, but prefer utilities */
.code-editor { /* Example if you had specific non-utility styles */
  @apply w-full h-64 bg-gray-900 text-gray-100 p-2 rounded border border-border-secondary font-mono text-sm focus:ring-1 focus:ring-accent-primary focus:border-accent-primary;
  /* Note: This class was used in AssemblyLayer. It's better to apply these utilities directly in JSX */
  /* I'll remove this and apply utilities directly in the components. */
}