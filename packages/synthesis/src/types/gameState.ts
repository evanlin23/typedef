// src/types/gameState.ts

export interface Resources {
  ticks: number;
  maxMemory: number; // Max memory capacity in "Code Units" (CU)
  usedMemory: number; // Currently used memory (approximation)
  entropy: number; // 0-100, affects efficiency
  aiAutoGeneratedTicks: number; // Tracks ticks from AI for stats
}

export interface Upgrades {
  cpuLevel: number;
  memoryLevel: number;
  optimizationLevel: number;
  aiCoreLevel: number;
  maxThreadsLevel: number; // For Concurrency Layer
}

export interface UpgradeCosts {
  cpu: number;
  memory: number;
  optimization: number;
  aiCore: number;
  maxThreads: number;
}

export interface MetaKnowledge {
  points: number;
  buffs: {
    tickMultiplier: number; // Global tick production multiplier
    costMultiplier: number; // Upgrade cost multiplier (e.g., 0.9 for 10% cheaper)
    entropyReductionMultiplier: number; // How effectively entropy is reduced or gain is slowed
    memoryMultiplier: number; // Global memory capacity multiplier
  };
}

export interface LayerBuff {
  id: string; // Unique ID for the buff effect
  isActive: boolean;
  expiresAt: number; // Timestamp for expiry (ms)
  effectMultiplier: number; // e.g., 1.2 for 20% boost to ticks from layer
  description: string;
}

export interface ActiveLayerBuffs {
  [layerKey: string]: LayerBuff | null; // e.g., 'assembly', 'highLevel'
}

// Define Thread state structure (can be moved from ConcurrencyLayer or kept there and imported if preferred)
export interface ThreadState {
  id: number;
  code: string;
  status: 'idle' | 'running' | 'completed' | 'error';
  output: string;
  ticksGeneratedLastRun: number;
  acquiredLocks: string[];
}

export interface GlobalConcurrencyLocks {
    [lockName: string]: number | undefined; // lockName -> threadId holding it
}

// New interface to hold states for individual layers
export interface LayerSpecificStates {
  assemblyCode: string;
  assemblyOutput: string;
  highLevelCode: string;
  highLevelOutput: string;
  concurrencyThreads: ThreadState[];
  concurrencyGlobalLocks: GlobalConcurrencyLocks;
  // Future layers might add their state here
  // e.g., aiLayerScript: string;
}

export interface GameState {
  resources: Resources;
  upgrades: Upgrades;
  upgradeCosts: UpgradeCosts;
  activeProcesses: number;
  
  metaKnowledge: MetaKnowledge;
  activeLayerBuffs: ActiveLayerBuffs;

  lastSaveTime: number;
  totalTicksGeneratedAllTime: number;

  autoTickEnabled: boolean;
  layerSpecificStates: LayerSpecificStates; // Added here
}

// Game Constants
export const BASE_TICK_RATE_PER_CPU_LEVEL = 0.5; // Potential Ticks per second per CPU level
export const AI_CORE_TICK_RATE_PER_LEVEL = 0.2; // Potential Ticks per second per AI core level
export const GAME_LOOP_INTERVAL_MS = 100; // Game loop runs every 100ms (10 times per second)
export const MAX_ENTROPY = 100;
export const ENTROPY_PER_PROCESS_PER_SEC = 0.1; // Base entropy gain
export const OPTIMIZATION_ENTROPY_REDUCTION_PER_LEVEL = 0.005; // Reduction per opt level

export const CODE_COST_ASSEMBLY_PER_CHAR = 0.02; // CU per character
export const CODE_COST_HIGHLEVEL_PER_CHAR = 0.01; // CU per character

export const initialAssemblyCode = `MOV AX, 1
ADD AX, 5 ; Example modification
NOP ; No operation
RET`;

export const initialHighLevelCode = `// High-Level Logic Example
function calculateComplexity(input) {
  let result = 0;
  for (let i = 0; i < input; i++) {
    result += Math.pow(i, 2) / (i + 0.5); // Modified logic
  }
  return Math.floor(result);
}

calculateComplexity(18); // Modified input
`;

export const initialConcurrencyThreadCode = (id: number) => `// Thread ${id} - High-Level Syntax
async function processDataPart(partId) {
  // Acquire a lock if dealing with shared resources
  // await acquireLock('shared_data_A');
  console.log(\`Thread ${id} processing part \${partId}\`);
  let sum = 0;
  for (let i = 0; i < (7 + partId); i++) { // Vary complexity
    sum += (i * partId) + Math.random();
    // Simulate work
    await new Promise(resolve => setTimeout(resolve, 40 + Math.random() * 20)); 
  }
  // releaseLock('shared_data_A');
  return sum;
}

processDataPart(${id});`;


export const initialGameState: GameState = {
  resources: {
    ticks: 0,
    maxMemory: 64,
    usedMemory: 0,
    entropy: 0,
    aiAutoGeneratedTicks: 0,
  },
  upgrades: {
    cpuLevel: 1,
    memoryLevel: 1,
    optimizationLevel: 0,
    aiCoreLevel: 0,
    maxThreadsLevel: 1,
  },
  upgradeCosts: {
    cpu: 10,
    memory: 25,
    optimization: 50,
    aiCore: 100,
    maxThreads: 75,
  },
  activeProcesses: 0,
  metaKnowledge: {
    points: 0,
    buffs: {
      tickMultiplier: 1.0,
      costMultiplier: 1.0,
      entropyReductionMultiplier: 1.0,
      memoryMultiplier: 1.0,
    },
  },
  activeLayerBuffs: {
    assembly: null,
    highLevel: null,
    concurrency: null,
  },
  lastSaveTime: Date.now(),
  totalTicksGeneratedAllTime: 0,
  autoTickEnabled: false,
  layerSpecificStates: { // Initialize new state
    assemblyCode: initialAssemblyCode,
    assemblyOutput: "// Assembly output will appear here",
    highLevelCode: initialHighLevelCode,
    highLevelOutput: "// High-level output will appear here",
    concurrencyThreads: [
      { 
        id: 1, 
        code: initialConcurrencyThreadCode(1), 
        status: 'idle', 
        output: '// Thread 1 ready', 
        ticksGeneratedLastRun: 0, 
        acquiredLocks: [] 
      }
    ],
    concurrencyGlobalLocks: {},
  },
};

// Helper Functions
export const calculateActualMaxMemory = (state: GameState): number => {
  const baseMemory = 64 * Math.pow(1.5, state.upgrades.memoryLevel - 1);
  return Math.floor(baseMemory * state.metaKnowledge.buffs.memoryMultiplier);
};

export const calculateTotalPotentialTickRate = (state: GameState): number => {
  // Tick rate before entropy, combining CPU and AI
  const cpuTicks = BASE_TICK_RATE_PER_CPU_LEVEL * state.upgrades.cpuLevel;
  const aiTicks = AI_CORE_TICK_RATE_PER_LEVEL * state.upgrades.aiCoreLevel;
  return (cpuTicks + aiTicks) * state.metaKnowledge.buffs.tickMultiplier;
};

export const calculateEffectiveTickRate = (state: GameState): number => {
  const totalPotentialRate = calculateTotalPotentialTickRate(state);
  const entropyFactor = 1 - (state.resources.entropy / (MAX_ENTROPY * 2)); // Max 50% reduction from entropy
  return totalPotentialRate * Math.max(0, entropyFactor); // Ensure non-negative
};

export const calculateMaxThreads = (state: GameState): number => {
  return 1 + state.upgrades.maxThreadsLevel; // e.g., Level 1 = 2 threads, Level 2 = 3 threads
};